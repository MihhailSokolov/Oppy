New test user in db:
username:Simba
plain pass: TigerBoy

CHECK USERNAME AVAILABILITY
    To check if username "oppy123" is available for registration
    Request:
        /nameavailable?username=oppy123
    Response
        200 OK
        Body: 'true' if is available, 'false' otherwise

REGISTRATION
    To register a new user with username "oppy123", password "passwd" (which after SHA256 hash becomes "0d6be69b264717f2dd33652e212b173104b4a647b7c11ae72e9885f11cd312fb")
    and email "oppy@gmail.com" (which should become oppy%40gmail.com because '@' should be represented as '%40' in UTF-8 encoding)
    Request:
        /register
        Body should contain JSON object of User with username, password and email (everything else can/should be null)
    Response:
        200 OK if user has been successfully registered. Body contains JSON Response object with message "true"
        JSON Response object contains explaining massage if user was not registered successfully

LOGIN
    To login with existing user whose username is "oppy123" and password "passwd" (which after SHA256 hash becomes "0d6be69b264717f2dd33652e212b173104b4a647b7c11ae72e9885f11cd312fb")
    Request:
        /login
        Body should contain JSON object of User with username and password (everything else can be null)
    Response:
        200 OK
        Body contains JSON Response object with message 'true' if username and password are correct, 'false' otherwise

GET POINTS
    To get the score for certain user
    Request:
        /score?username=oppy
    Response:
        200 OK Body contains JSON Response object with message with the score
        500 ERROR if could not get points/find user

DELETE ACCOUNT
    To delete account for certain username. Also provide password in order to make sure nobody else can delete it.
    Request:
        /delete
        Body should contain JSON object of User with username and password (everything else can be null)
    Response:
        200 OK if user is authorized with provided username and password
        401 UNAUTHORIZED if user could not be authorized
        Body contains JSON Response object with message 'true' if account was successfully deleted,
            'false' if user was not authorized or account could not be deleted

UPDATE PASSWORD
    Required:
        Username, old password, new password
    Request:
        /updatepass?newpass=myNewAwesomePass
        Body should contain JSON object of User with username and password (everything else can be null)
    Response:
        200 OK if user authorized to change pass
        401 UNAUTHORIZED otherwise
        Body contains JSON Response object with message 'true' if account was successfully deleted,
            'false' if user was not authorized or account could not be updated

GET ACTIONS
    To get all the actions from the database
    Request:
        /actions
    Response:
        200 OK
        Body contains list of json action objects

TAKE ACTION
    To take an action by user (like oppy123 recycled bottled)
    Request:
        /takeaction?username=oppy123
        Body should contain JSON object of Action with actionName (everything else can be null)
    Response:
        200 OK
        Body contains JSON Response object with message 'true' if taking action has been successfully recorded in db, 'false' otherwise

TAKE MULTIPLE ACTIONS
    To take several actions with one request by user
    Request:
        /takeactions?username=oppy123
        Body should contain JSON list of all Actions to be taken. Each action is only required to have actionName, everything else can be null.
        For example body could be the following:
        [{"actionName":"Recycle paper","category":"Recycling","points":10},{"actionName":"Go by bike","category":"Transportation","points":20}]
    Response:
        200 OK
        Body contains JSON Response object with message 'true' if taking actions has been successfully recorded in db, 'false' otherwise

GET EMAIL
    To get user's email from db
    Request:
        /email?username=oppy123
    Response:
        200 OK
        Body contains JSON Response object with user's email as a message

UPDATE EMAIL
     Required:
        Username, password, new EMAIL
     Request:
        /updateEmail?newEmail=myNewCoolEmail
        Body should contain JSON object of User with username and password (everything else can be null)
     Response:
        200 OK if user authorized to change pass
        401 UNAUTHORIZED otherwise
        Body contains JSON Response object with message 'true' if account was successfully deleted,
            'false' if user was not authorized or account could not be updated

GET TOP 50
    To get top 50 players based on their score (anonymous users are not returned)
    Request:
	    /top50
    Response:
	    200 OK
	    Body contains json list of users with all fields set to null except from username and score

CHANGE ANONYMOUS
    To change anonymous status of the user in db
    Request:
        /changeAnonymous?anonymous=true
        Body should contain JSON object of User with username and password (everything else can be null)
    Response:
        200 OK if user is authorized
        401 UNAUTHORIZED if user is not authorized
        Body contains JSON Response object with message 'true' if anonymous status was changed successfully,
            'false' if user was not authenticated or anonymous status could not be changed

GET PRESETS
    To get user's presets from db
    Request:
        /presets?username=oppy123
    Response:
        200 OK
        Body contains JSON list of Preset objects

ADD PRESET
    To add a new preset to the list of user's presets
    Request:
        /addpreset?username=oppy123
        Body should contain JSON object of Preset
    Response:
        200 OK
        Body contains JSON Response object with message 'true' if preset was successfully added, 'false' otherwise

DELETE PRESET
    To delete a preset from the list of user's presets
    Request:
        /deletepreset?username=oppy123
        Body should contain JSON object of Preset with its name (everything else can be null)
    Response:
        200 OK
        Body contains JSON Response object with message 'true' if preset was successfully deleted, 'false' otherwise

EXECUTE PRESET
    To execute a list of actions defined in user's preset
    Request:
        /executepreset?username=oppy123
        Body should contain JSON Preset object with preset name (everything else can be null)
    Response:
        200 OK
        Body contains JSON Response object with message 'true' if preset was successfully executed, 'false' otherwise

GET FRIENDS
    To get a list of user's friends from db
    Request:
        /friends?username=oppy123
    Response:
        200 OK
        Body contains JSON List of User objects who are user's friends

ADD FRIEND
    To add a new friend/user to the list of user's friends
    Request:
        /addfriend?username=oppy123
        Body should contain JSON User object that will be added to the friend list (must contain username, rest is optional)
    Response:
        200 OK
        Body contains JSON Response object with message 'true' if friend was successfully added, 'false' otherwise

DELETE FRIEND
    To delete a friend/user from the list of user's friends
    Request:
        /deletefriend?username=oppy123
        Body should contain JSON User object to be deleted from the list with username (everything else can be null)
    Response:
        200 OK
        Body contains JSON Response object with message 'true' if friend was successfully deleted, 'false' otherwise

GET YOUR POSITION
    To get your position in the list of users based on score
    Request:
        /position?username=oppy123
    Response:
        200 OK
        Body contains JSON Response object with message string containing integer of your position (-1 if couldn't find you).

GET PROFILE PICTURE
    To get user's profile picture as a binary string from the database
    Request:
        /getprofilepic?username=oppy123
    Response:
        200 OK
        Body contains JSON Response object with message string containing binary representation of profile picture. Message will be empty if couldn't find the user.

SET PROFILE PICTURE
    To set/update user's profile picture in db
    Request:
        /setprofilepic
        Body contains JSON User object with username and new profilePicture we want to set (everything else can be null)
    Response:
        200 OK
        Body contains JSON Response object with message 'true' if profile picture was successfully changed, 'false' otherwise (if could not find user for example)

GET USER INFO
    To get complete user object with all the attributes
    Request:
        /userinfo
        Body should contain JSON User object with username and password (everything else can be null)
    Response:
    200 OK if user is authorized. Body contains JSON User object
    401 UNAUTHORIZED if user is not authorized. Body contains JSON null object

SEARCH FOR USER
    To search for user based on username
    Request:
        /search?username=oppy123
    Response:
        200 OK
        Returns JSON User object whose username matches with provided username (case-insensitive) if found it, null otherwise

CHANGE hasSolarPanels
    To change hasSolarPanels value of the user in db
    Request:
        /changeSolarPanels?hasSolarPanels=true
        Body should contain JSON object of User with username and password (everything else can be null)
    Response:
        200 OK if user is authorized
        401 UNAUTHORIZED if user is not authorized
        Body contains JSON Response object with message 'true' if hasSolarPanels value was changed successfully,
            'false' if user was not authenticated or hasSolarPanels value could not be changed